{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "output_type": "error",
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-1-250080630512>, line 2)",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-1-250080630512>\"\u001b[1;36m, line \u001b[1;32m2\u001b[0m\n\u001b[1;33m    \"pizza\":{\"prize\":9.99,\"ingredients\":[\"dough\",\"souce\".\"peperoni\",\"cheese\"]},\u001b[0m\n\u001b[1;37m                                                                  ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "menu = {\n",
    "    \"pizza\":{\"prize\":9.99,\"ingredients\":[\"dough\",\"souce\".\"peperoni\",\"cheese\"]},\n",
    "    \"sub\":{\"price\":8.99,\"ingredients\":[\"chicken\",\"lettuce\",\"tomato\"]}\n",
    "}\n",
    "\n",
    "fridge = [\"dough\", \"bread\", \"sauce\",\"lettuce\"]\n",
    "continue_order = True\n",
    "order = []\n",
    "while continue_order:\n",
    "    customer_order = input(\"what would you like to order Enter(finish) to finish your order\")\n",
    "    if customer_order.lower() == \"finish\": #Finish\n",
    "        continue_order = False\n",
    "    elif customer_order == \"menu\":\n",
    "        print(\"**************MENU********************\")\n",
    "        for item in menu.keys():\n",
    "            print(f\"{item}:{menu.get(item).get('price')}\")\n",
    "        print(\"*****************************\")\n",
    "print(\"exit the while loop\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "bulutlu\naçık ve güneşli\ngök gürültülü ve sağanak yağışlı\nBu şehre ilişkin havadurumu bilgisi bulunmamaktadır.\n"
    }
   ],
   "source": [
    "for i in range(4):\n",
    "    soru = input(\"Şehrinizin adını tamamı küçük harf olacak şekilde yazın:\")\n",
    "\n",
    "    cevap = {\"istanbul\": \"gök gürültülü ve sağanak yağışlı\",\n",
    "         \"ankara\": \"açık ve güneşli\", \"izmir\": \"bulutlu\"}\n",
    "\n",
    "    print(cevap.get(soru, \"Bu şehre ilişkin havadurumu bilgisi bulunmamaktadır.\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": "*************** MENU ***************\npizza : 9.99\n\nsub : 8.99\n\ngrilled cheese : 5.99\n\npasta : 5.99\n\nwings : 10.99\n\ncookie : 3.99\n\n************************************\n"
    },
    {
     "output_type": "error",
     "ename": "NameError",
     "evalue": "name 'current_order' is not defined",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-9-a8d65f33af25>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     22\u001b[0m             \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     23\u001b[0m         \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"************************************\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 24\u001b[1;33m     \u001b[1;32melif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mcurrent_order\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0misalpha\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     25\u001b[0m         \u001b[0morder_started\u001b[0m \u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     26\u001b[0m         \u001b[0mprint\u001b[0m \u001b[1;33m(\u001b[0m\u001b[1;34mf\"{customer_order} is not a valid entery please enter something from the menu\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'current_order' is not defined"
     ]
    }
   ],
   "source": [
    "menu = {\n",
    "    \"pizza\": {\"price\": 9.99, \"ingredients\": [\"dough\", \"sauce\", \"pepperoni\", \"cheese\"]},\n",
    "    \"sub\": {\"price\": 8.99, \"ingredients\": [\"chicken\", \"lettuce\", \"tomato\", \"bread\", \"mayonnaise\"]},\n",
    "    \"grilled cheese\": {\"price\": 5.99, \"ingredients\": [\"bread\", \"cheese\"]},\n",
    "    \"pasta\": {\"price\": 5.99, \"ingredients\": [\"sauce\", \"cheese\", \"pasta\", \"chicken\"]},\n",
    "    \"wings\": {\"price\": 10.99, \"ingredients\": [\"wings\", \"wingsauce\"]},\n",
    "    \"cookie\": {\"price\": 3.99, \"ingredients\": [\"cookie\"]},\n",
    "}\n",
    "fridge = [\"dough\", \"bread\", \"sauce\", \"lettuce\", \"tomatos\", \"wingsauce\", \"wings\",\"cheese\", \"pepperoni\", \"cookie\"]\n",
    "continue_order = True\n",
    "order_pending =[]\n",
    "order_started =False\n",
    "while continue_order :\n",
    "    customer_order = input(\"what would you like to order Enter (finish) to finish your order or menu to look at the menu : \")\n",
    "    customer_order = customer_order.lower().strip()\n",
    "    if customer_order== \"finish\": # Finish\n",
    "        continue_order = False\n",
    "    elif customer_order == \"menu\":\n",
    "        print(\"*************** MENU ***************\")\n",
    "        for item in menu.keys():\n",
    "            print(f\"{item} : {menu.get(item).get('price')}\")\n",
    "            print()\n",
    "        print(\"************************************\")\n",
    "    elif not current_order.isalpha():\n",
    "        order_started =True\n",
    "        print (f\"{customer_order} is not a valid entery please enter something from the menu\")\n",
    "    else:\n",
    "        order_started =True\n",
    "        order_pending.append(customer_order)\n",
    "        \n",
    "order_preparing=[]\n",
    "total_price = 0\n",
    "while order_pending:\n",
    "    current_order = order_pending.pop()\n",
    "    can_make_order = True\n",
    "    if current_order not in menu.keys():\n",
    "        print(f\"{current_order} not in our menu sorry \")\n",
    "        continue\n",
    "    for ingredient in menu.get(current_order).get(\"ingredients\"):\n",
    "        if ingredient not in fridge :\n",
    "            can_make_order =False\n",
    "            print(f\"we dont have {ingredient} sorry cant make your {current_order}\")\n",
    "            break\n",
    "    if can_make_order:\n",
    "        order_preparing.append(current_order)\n",
    "        total_price+= menu.get(current_order).get('price') \n",
    "if order_preparing:\n",
    "    print(f\"Your order of {order_preparing} is confirmed\\nYour order will be ready in {len(order_preparing)*10} minutes\\nYour total price will be {total_price*1.06}$\")      \n",
    "elif not order_started:\n",
    "    print(f\"Sorry to see you go , please come back again\")\n",
    "else:\n",
    "    print(f\"Sorry your order is not in our menu please try again\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6-final"
  },
  "orig_nbformat": 2,
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}